
var clusterChart;
var clusters;
var dense;
var selectedBar;

 $.ajax({
       type: "GET",
       contentType: "application/json; charset=utf-8",
       url: 'data',
       dataType: 'json',
       success: function (data) {
           draw(data);
       },
       error: function (result) {
           error();
       }
   });

function draw(data) {
    dense = data;
    genDense();
    genPie();
}



function genDense(){
		
		var w = 700;
		var h = 400;
	
		var padding=100;	
		
		var hscale= d3.scale.linear()
			.domain([10,0])
			.range([padding,h-padding]);
		
		
		var cscale= d3.scale.linear()
			.domain([0,20])
			.range(['#334bff','#000a52' ]);
		
		var xscale= d3.scale.linear()
			.domain([0,dense.length])
			.range([padding,w-padding]);
		
		 yaxis = d3.svg.axis()
			.scale(hscale)
			.tickFormat(d3.format("f"))
			.ticks(5)
			.orient("left");

		xaxis = d3.svg.axis()
			.scale(xscale)
			.tickFormat(d3.format("f"))
			.ticks(5)
			.orient("bottom");
		
		var svg= d3.select("#barChart")
					.append("svg")
					.attr("width",w)
					.attr("height",h+40); 

		svg.selectAll("rect")
					.data(dense)
					.enter()
					.append("rect")
						.attr("fill","orange")
						.attr("width",Math.floor((w-padding*2)/dense.length)-1)
						.attr("height",function(d) {return h-padding-hscale(d.langCount);})
						.attr("y",function(d) {return hscale(d.langCount);})
						.attr("x",function(d, i) { return xscale(i); })
						.on("mouseover",function(d,i){
													d3.select(this).attr("style","cursor:pointer;");
													if(i!=selectedBar) d3.select(this).attr("fill","blue");
													var texts=svg.selectAll("text");
													if(i!=selectedBar){
														d3.select(texts[0][i])
                                                        .attr({
                                                           //id: "t" + d.x + "-" + d.y + "-" + i,  // Create an id for text so we can select it later for removing on mouseout
                                                            x: function() { return xScale(d.x) - 30; },
                                                            y: function() { return yScale(d.y) - 15; }
                                                        })
                                                        .text(function() {
                                                          return d.lang;
                                                        })
                                                    }});
						.on("mouseout",function(d,i){
								
													    var texts=svg.selectAll("text");
														d3.select(texts[0][i])
																.text("");
														var allBars = svg.selectAll("rect");
														allBars.attr("stroke","none");
														allBars.attr("fill","orange")
													})
						
		var texts =svg.selectAll("text").data(dense);
			
		
		texts.enter()
			.append("text")
			.style("text-anchor", "middle")
			.style("font-family", "sans-serif")
			.style("font-size", "18px")
			.style("fill", "blue")
			.attr("x",350)
			.attr("y",430)
			.text("");
						
		svg.append("g")
			.attr("class", "axis") //Assign "axis" class
			.attr("transform", "translate(0," + (h - padding) + ")")
			.call(xaxis)
			.append("text")
			.attr("font-size","5px")
			.attr("x", w - padding)
			.attr("y", 40)
			.style("text-anchor", "end")
			.text("Origin Country");

		svg.append("g")
			.attr("class", "axis") //Assign "axis" class
			.attr("transform", "translate(" + padding + ",0)")
			.call(yaxis)
			.append("text")
			.attr("font-size","5px")
			.attr("y", padding - 10)
			.attr("x", padding + 20)
			.style("text-anchor", "middle")
			.text("Number of Registered Refugees");
}

function genPie(){

    var w = 300,                        //width
    h = 300,                            //height
    r = 100,                            //radius
    color = d3.scale.category20c();     //builtin range of colors
    data = [{"label":"one", "value":20},
          {"label":"two", "value":50},
          {"label":"three", "value":30}];

    var vis = d3.select("#pieChart")
      .append("svg:svg")              //create the SVG element inside the <body>
      .data([data])                   //associate our data with the document
          .attr("width", w)           //set the width and height of our visualization (these will be attributes of the <svg> tag
          .attr("height", h)
      .append("svg:g")                //make a group to hold our pie chart
          .attr("transform", "translate(" + r + "," + r + ")")    //move the center of the pie chart from 0, 0 to radius, radius
    var arc = d3.svg.arc()              //this will create <path> elements for us using arc data
      .outerRadius(r);
    var pie = d3.layout.pie()           //this will create arc data for us given a list of values
      .value(function(d) { return d.value; });    //we must tell it out to access the value of each element in our data array
    var arcs = vis.selectAll("g.slice")     //this selects all <g> elements with class slice (there aren't any yet)
      .data(pie)                          //associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties)
      .enter()                            //this will create <g> elements for every "extra" data element that should be associated with a selection. The result is creating a <g> for every object in the data array
          .append("svg:g")                //create a group to hold each slice (we will have a <path> and a <text> element associated with each slice)
              .attr("class", "slice");    //allow us to style things in the slices (like text)
      arcs.append("svg:path")
              .attr("fill", function(d, i) { return color(i); } ) //set the color for each slice to be chosen from the color function defined above
              .attr("d", arc);                                    //this creates the actual SVG path using the associated data (pie) with the arc drawing function
      arcs.append("svg:text")                                     //add a label to each slice
              .attr("transform", function(d) {                    //set the label's origin to the center of the arc
              //we have to make sure to set these before calling arc.centroid
              d.innerRadius = 0;
              d.outerRadius = r;
              return "translate(" + arc.centroid(d) + ")";        //this gives us a pair of coordinates like [50, 50]
          })
          .attr("text-anchor", "middle")                          //center the text on it's origin
          .text(function(d, i) { return data[i].label; });        //get the label from our original data array
}
